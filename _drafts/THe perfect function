# Guide to Writing Top-Notch Functions in Python

## Core Design Principles

### 1. Do One Thing Well
A function should have a single, clear responsibility. If you can explain what your function does in one sentence, you're on the right track. If not, consider breaking it down into smaller functions.

```python
# Too broad
def process_user_data(user_data):
    # Updates database, sends email, logs activity, etc.
    pass

# Better - separated concerns
def save_user_to_database(user_data):
    # Only handles database operations
    pass

def send_welcome_email(user_email):
    # Only handles email sending
    pass
```

### 2. Keep Functions Short and Focused
Aim for 3-5 lines when possible, rarely exceeding 20-30 lines. Shorter functions are easier to understand, test, and maintain.

### 3. Use Descriptive Names
Function names should clearly describe what the function does. Use verbs for actions and be specific.

```python
# Poor
def proc(d):
    pass

# Better
def calculate_total_price(items, discount_rate):
    pass
```

### 4. Include Proper Documentation
Always write clear docstrings following conventions (like Google, NumPy, or reST format):

```python
def transfer_funds(source_account: str, target_account: str, amount: float) -> bool:
    """
    Transfer funds between two accounts.
    
    Args:
        source_account: The account to withdraw funds from
        target_account: The account to deposit funds to
        amount: The amount to transfer (must be positive)
    
    Returns:
        bool: True if the transfer was successful, False otherwise
    
    Raises:
        ValueError: If amount is negative or if source_account has insufficient funds
    
    Example:
        >>> transfer_funds("checking-123", "savings-456", 100.00)
        True
    """
```

## Error Handling and Edge Cases

### 5. Handle Edge Cases
Consider what happens with:
- Empty inputs
- Boundary values (min/max)
- Unexpected input types
- Zero values
- Negative values (when applicable)

```python
def calculate_average(numbers):
    if not numbers:  # Handle empty list
        return 0
    return sum(numbers) / len(numbers)
```

### 6. Handle Errors Gracefully
Use appropriate try/except blocks and raise meaningful exceptions:

```python
def read_config_file(file_path):
    try:
        with open(file_path, 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        raise FileNotFoundError(f"Config file not found: {file_path}")
    except json.JSONDecodeError:
        raise ValueError(f"Invalid JSON in config file: {file_path}")
```

## Technical Best Practices

### 7. Use Type Hints
Modern Python code should use type annotations for better clarity and tooling support:

```python
from typing import List, Dict, Optional

def find_user_by_id(user_id: int) -> Optional[Dict[str, any]]:
    """Find a user by their ID."""
    # Implementation
```

### 8. Consider Return Value Consistency
Be consistent with return types and values:

```python
# Inconsistent - sometimes returns dict, sometimes None, sometimes raises exception
def get_user_data(user_id):
    if not user_id:
        return None
    if user_id < 0:
        raise ValueError("Invalid user ID")
    # ...return user data as dict

# Better - always returns the same type, uses exceptions for errors
def get_user_data(user_id: int) -> Dict[str, any]:
    if not user_id or user_id < 0:
        raise ValueError("Invalid user ID")
    # ...return user data as dict
```

### 9. Use Default Arguments Wisely
Default arguments can make functions more flexible, but use them carefully:

```python
# Good use of defaults
def connect_to_database(host="localhost", port=5432, timeout=30):
    # Implementation

# Caution with mutable defaults
def append_to_list(item, target_list=None):
    if target_list is None:
        target_list = []  # Create a new list if not provided
    target_list.append(item)
    return target_list
```

## Performance Considerations

### 10. Optimize for Appropriate Performance
Consider time and space complexity (Big O notation):

```python
# O(nÂ²) - inefficient for large lists
def find_duplicates_inefficient(items):
    duplicates = []
    for i in range(len(items)):
        for j in range(i+1, len(items)):
            if items[i] == items[j] and items[i] not in duplicates:
                duplicates.append(items[i])
    return duplicates

# O(n) - much more efficient
def find_duplicates_efficient(items):
    seen = set()
    duplicates = set()
    for item in items:
        if item in seen:
            duplicates.add(item)
        else:
            seen.add(item)
    return list(duplicates)
```

### 11. Use Built-ins and Standard Library
Python's built-in functions and standard library are optimized and well-tested:

```python
# Instead of writing your own implementation
numbers = [1, 2, 3, 4, 5]
total = 0
for num in numbers:
    total += num
    
# Use built-in sum()
total = sum(numbers)
```

### 12. Consider Generator Functions
For large datasets, use generators to process data efficiently:

```python
# Memory intensive for large files
def read_large_file(file_path):
    with open(file_path, 'r') as file:
        return file.readlines()  # Loads entire file into memory

# Memory efficient
def read_large_file(file_path):
    with open(file_path, 'r') as file:
        for line in file:  # Processes one line at a time
            yield line.strip()
```

## Testing and Maintenance

### 13. Write Testable Functions
Create functions that are inherently testable:

- Pure functions are easiest to test (same output for same input, no side effects)
- Dependency injection - pass dependencies rather than creating them inside the function
- Small, focused functions with clear inputs and outputs

```
# Hard to test - creates its own dependency
def process_user_data():
    db = Database()  # Creating dependency inside
    users = db.get_all_users()
    # process users...

# Easy to test - accepts dependency
def process_user_data(users):
    # process users...
    return processed_data
```


### 14. Avoid Global State
Minimize the use of global variables:

```python
# Avoid
total_count = 0

def increment_counter():
    global total_count
    total_count += 1

# Better
class Counter:
    def __init__(self):
        self.total_count = 0
        
    def increment(self):
        self.total_count += 1
```

## Conclusion

Writing top-notch Python functions is a blend of art and science. Always prioritize readability and maintainability over cleverness. Remember that the code you write will be read many more times than it's written, often by other developers (or you in the future). Clear, well-designed functions make your code a pleasure to work with.